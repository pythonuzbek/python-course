<!DOCTYPE html><html lang="en"><head>
    {% load static %}
<title>Python - Syntax</title>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes, maximum-scale=6"> <meta name="Keywords" content="Syntax, Python, HTML, Python, CSS, SQL, JavaScript, Perl, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Machine Learning, Data Science, Tutorials, Programming, Data Structure, Algorithms, Web Development, Training, Learning, Quiz, Exercises, Courses, References, Computer Science, Management, Finance, Examples, Articles, Demos, Tips, Website">
<meta name="Description" content="Python - Syntax - The Python syntax defines a set of rules that are used to create a Python Program. The Python Programming Language Syntax has many similarities to Perl, C, and Java Programming Languages. However, there are some definite differences between the languages.">
<meta property="og:image" content="../images/tp_logo_436.png">
<meta property="og:image:type" content="image/png">
<meta property="og:image:width" content="436">
<meta property="og:image:height" content="228">
<meta property="og:title" content="Python - Syntax">
<meta property="og:description" content="Python - Syntax - The Python syntax defines a set of rules that are used to create a Python Program. The Python Programming Language Syntax has many similarities to Perl, C, and Java Programming Languages. However, there are some definite differences between the languages.">
<link rel="icon" href="{% static '/images/favicon.ico' %}">
<link rel="apple-touch-icon" sizes="180x180" href="{% static '/images/apple-touch-icon.png' %}">
<link rel="icon" type="image/png" sizes="32x32" href="{% static '/images/favicon-32x32.png' %}">
<link rel="icon" type="image/png" sizes="16x16" href="{% static '/images/favicon-16x16.png' %}">
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="">
<link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;500;600;700&amp;family=Lato:wght@400;700&amp;family=Poppins:wght@400;500;600&amp;family=Raleway:wght@500&amp;display=swap" rel="stylesheet">
<link rel="stylesheet" href="{% static '/static/css/lib-style_v41.56.css' %}" media="screen, print">
<script id="adv" data-cfasync="false">(function(w, d) { var s = d.createElement('script'); s.src = '//cdn.adpushup.com/40046/adpushup.js'; s.type = 'text/javascript'; s.async = true; (d.getElementsByTagName('head')[0] || d.getElementsByTagName('body')[0]).appendChild(s); })(window, document);</script>
<script>
!function(t,e){var i=function(t,e){if(e.body){var n=e.createElement("div");n.className="ad-slot ad gpt-div-slot",n.style="position: absolute; visibility: hidden;",n.textContent="&nbsp;",e.body.appendChild(n),setTimeout((function(){if(0===n.clientHeight){var t=e.createElement("script");t.setAttribute("src","https://delivery.adrecover.com/18107/adRecover.js"),t.setAttribute("type","text/javascript"),t.setAttribute("async",!0),e.head.append(t)}}),0)}else setTimeout((function(){i(t,e)}),50)};i(t,e)}(window,document);
</script>
</head>
<body style="--container: min(95%, 1780px);">
<button class="icon-button--inverted scroll-to-top-button" title="Scroll Up">
  <svg style="rotate: 180deg" width="24" height="24" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M9.52246 5.06689L6.08496 8.50439L2.64746 5.06689" stroke="#fff" stroke-linecap="round" stroke-linejoin="round"></path></svg>
</button>

<main class="bg-light" style="overflow: unset;">
<div class="container-fluid">
<div class="row">
<div class="tutorial-toc">
<div class="toc-nav">
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
tex2jax: { inlineMath: [["$","$"],["\\(","\\)"]] },
"HTML-CSS": {
linebreaks: { automatic: true, width: "container" }          
}              
});
</script>
<script type="text/javascript" src="{% static '/mathjax/latest/MathJax_config=TeX-AMS-MML_HTMLorMML.js' %}}"></script>
<div class="mini-logo">
<img src="{% static 'images/python-mini-logo_v1.jpg' %}" alt="Python Tutorial">
</div>
<ul class="toc chapters">
<li class="heading">Python Basics</li>
<li><a href="{% url 'index_view' %}">Python - Home</a></li>
<li><a href="{% url 'python_overview' %}">Python - Overview</a></li>
<li><a href="{% url 'basic_syntax' %}">Python - Basic Syntax</a></li>
<li><a href="{% url 'variables' %}">Python - Variables</a></li>
<li><a href="{% url 'data_types' %}">Python - Data Types</a></li>
<li><a href="{% url 'operators' %}">Python - Operators</a></li>
<li><a href="{% url 'arithmetic_operators' %}">Python - Arithmetic Operators</a></li>
<li><a href="{% url 'comments' %}">Python - Comments</a></li>
<li><a href="{% url 'boolean' %}">Python - Booleans</a></li>
<li><a href="{% url 'if_statement' %}">Python - If Statement</a></li>
<li><a href="{% url 'if_else' %}">Python - If else</a></li>
<li><a href="{% url 'nested_if' %}">Python - Nested If</a></li>
<li><a href="{% url 'loops' %}">Python - Loops</a></li>
<li><a href="{% url 'for_loops' %}">Python - for Loops</a></li>
<li><a href="{% url 'while_loops' %}">Python - While Loops</a></li>
<li><a href="{% url 'function' %}">Python - Functions</a></li>
<li><a href="{% url 'strings' %}">Python - Strings</a></li>
<li><a href="{% url 'slicing_string' %}">Python - Slicing Strings</a></li>
<li><a href="{% url 'string_exercise' %}">Python - String Exercises</a></li>
<li><a href="{% url 'list' %}">Python - Lists</a></li>
<li><a href="{% url 'list-comprehension' %}">Python - List Comprehension</a></li>
<li><a href="{% url 'list_methods' %}">Python - List Methods</a></li>
<li><a href="{% url 'list_exercise' %}">Python - List Exercises</a></li>
<li><a href="{% url 'tuple' %}">Python - Tuples</a></li>
<li><a href="{% url 'tuple_methods' %}">Python - Tuple Methods</a></li>
<li><a href="{% url 'tuple_exercise' %}">Python - Tuple Exercises</a></li>
<li><a href="{% url 'set' %}">Python - Sets</a></li>
<li><a href="{% url 'set_methods' %}">Python - Set Methods</a></li>
<li><a href="{% url 'set_exercise' %}">Python - Set Exercises</a></li>
<li><a href="{% url 'dictionary' %}">Python - Dictionaries</a></li>
<li><a href="{% url 'dictionary_methods' %}">Python - Dictionary Methods</a></li>
<li><a href="{% url 'dictionary_exercise' %}">Python - Dictionary Exercises</a></li>
<li><a href="{% url 'array' %}">Python - Arrays</a></li>
<li><a href="{% url 'oop_concepts' %}">Python - OOPs Concepts</a></li>
<li><a href="{% url 'object_class' %}">Python - Object &amp; Classes</a></li>
<li><a href="{% url 'class_attributes' %}">Python - Class Attributes</a></li>
<li><a href="{% url 'class_methods' %}">Python - Class Methods</a></li>
<li><a href="{% url 'inheritance' %}">Python - Inheritance</a></li>
<li><a href="{% url 'polymorphism' %}">Python - Polymorphism</a></li>
<li><a href="{% url 'encapsulation' %}">Python - Encapsulation</a></li>
<li><a href="{% url 'package' %}">Python - Packages</a></li>
<li><a href="{% url 'discuss' %}">Python - Discussion</a></li>
</ul>
      </div>
      <div id="stickyparent" class="d-none d-sm-block">
         <div style="height:250px;width:300px;" id="sticky-ad">
            <div id="430c9911-782f-495d-88f9-69f58ca8c9a4" class="_ap_apex_ad">
               <script>
               var adpushup = adpushup || {};
               adpushup.que = adpushup.que || [];
               adpushup.que.push(function() {
               adpushup.triggerAd("430c9911-782f-495d-88f9-69f58ca8c9a4");
               });
               </script>
            </div>
         </div>
      </div>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="tutorial-content" id="mainContent">
<h1>Python - Syntax</h1>
<hr>
<div id="adp_top_ads" style="text-align:center !important;overflow: hidden; max-height:99px;min-height:99px"></div>
<script>
     var adPos = document.getElementById('adp_top_ads');
     var ad_id_720 = "8014640d-fd34-4b2e-9b1b-cc67234a2325";
     var ad_id_650 = "2d1bb2c4-eb72-471d-9c80-1bf5514728c1";
     var ad_id_300 = "df94a1a9-ae2f-432d-9a92-d93823ff4503";
     var width = window.innerWidth;
     var ad_id = ad_id_720;
     if( width <= 768 ){
        ad_id =  ad_id_300;
        adPos.style.minHeight = "260px";
        adPos.style.maxHeight = "260px";
     }else if( width <= 1435 ){
        ad_id =  ad_id_650;
     }
     adPos.innerHTML = '<div id="' + ad_id + '" class="_ap_apex_ad"></div>';
     var adpushup = adpushup || {};
     adpushup.que = adpushup.que || [];
     adpushup.que.push(function() {
     adpushup.triggerAd(ad_id);
     });
</script>
<hr>
<div class="clearer"></div>
<h2>Python - Syntax</h2>
<p>The Python syntax defines a set of rules that are used to create a Python Program. The Python Programming Language Syntax has many similarities to Perl, C, and Java Programming Languages. However, there are some definite differences between the languages.</p>
<h2>First Python Program</h2>
<p>Let us execute a <a href="/python/python_hello_world.htm" target="_blank">Python program to print "Hello, World!"</a> in two different modes of Python Programming. (a) Interactive Mode Programming (b) Script Mode Programming.</p>
<h3>Python - Interactive Mode Programming</h3>
<p>We can invoke a <a href="/python/online-python-compiler.php" target="_blank">Python interpreter</a> from command line by typing <b>python</b> at the command prompt as following −</p>
<pre class="just-code notranslate language-python" data-lang="python3">$ python3
Python 3.10.6 (main, Mar 10 2023, 10:55:28) [GCC 11.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
</pre>
<p>Here <b>&gt;&gt;&gt;</b> denotes a Python Command Prompt where you can type your commands. Let's type the following text at the Python prompt and press the Enter −</p>
<pre class="just-code notranslate language-python" data-lang="python3">&gt;&gt;&gt; print ("Hello, World!")
</pre>
<p>If you are running older version of Python, like Python 2.4.x, then you would need to use print statement without parenthesis as in <b>print "Hello, World!"</b>. However in Python version 3.x, this produces the following result −</p>
<pre class="result notranslate">Hello, World!
</pre>
<h3>Python - Script Mode Programming</h3>
<p>We can invoke the <a href="/python/python_interpreter.htm" target="_blank">Python interpreter</a> with a script parameter which begins the execution of the script and continues until the script is finished. When the script is finished, the interpreter is no longer active.</p>
<p>Let us write a simple Python program in a script which is simple text file. Python files have extension <b>.py</b>. Type the following source code in a <b>test.py</b> file −</p>
<pre class="demo-code notranslate language-python" data-lang="python3">print ("Hello, World!")
</pre>
<p>We assume that you have Python interpreter <a href="/python/python_environment.htm" target="_blank">path set in PATH variable</a>. Now, let's try to run this program as follows −</p>
<pre class="prettyprint notranslate">$ python3 test.py
</pre>
<p>This produces the following result −</p>
<pre class="result notranslate">Hello, World!
</pre>
<p>Let us try another way to execute a Python script. Here is the modified test.py file −</p>
<pre class="demo-code notranslate language-python" data-lang="python3">#!/usr/bin/python3

print ("Hello, World!")
</pre>
<p>We assume that you have Python interpreter available in /usr/bin directory. Now, try to run this program as follows −</p>
<pre class="prettyprint notranslate">$ chmod +x test.py     # This is to make file executable
$./test.py
</pre>
<p>This produces the following result −</p>
<pre class="result notranslate">Hello, World!
</pre>
<h2>Python Identifiers</h2>
<p>A Python identifier is a name used to identify a <a href="{% url 'variables' %}" target="_blank">variable</a>, <a href="/python/python_functions.htm" target="_blank">function</a>, <a href="/python/python_object_classes.htm" target="_blank">class</a>, <a href="/python/python_modules.htm" target="_blank">module</a> or other object. An identifier starts with a letter A to Z or a to z or an underscore (_) followed by zero or more letters, underscores and digits (0 to 9).</p>
<p>Python does not allow punctuation characters such as @, $, and % within identifiers.</p>
<blockquote>Python is a case sensitive programming language. Thus, <b>Manpower</b> and <b>manpower</b> are two different identifiers in Python.</blockquote>

<p>Here are naming conventions for Python identifiers −</p>
<ul class="list">
<li><p>Python Class names start with an uppercase letter. All other identifiers start with a lowercase letter.</p></li>
<li><p>Starting an identifier with a single leading underscore indicates that the identifier is <b>private</b> identifier.</p></li>
<li><p>Starting an identifier with two leading underscores indicates a strongly <b>private</b> identifier.</p></li>
<li><p>If the identifier also ends with two trailing underscores, the identifier is a <b>language-defined</b> special name.</p></li>
</ul>
<h2>Python Reserved Words</h2>
<p>The following list shows the Python keywords. These are reserved words and you cannot use them as constant or variable or any other identifier names. All the Python keywords contain lowercase letters only.</p>
<div class="table-wrapper"><table class="table table-bordered" style="text-align:center;">
<tbody><tr>
<td>and</td>
<td>as</td>
<td>assert</td>
</tr>
<tr>
<td>break</td>
<td>class</td>
<td>continue</td>
</tr>
<tr>
<td>def</td>
<td>del</td>
<td>elif</td>
</tr>
<tr>
<td>else</td>
<td>except</td>
<td>False</td>
</tr>
<tr>
<td>finally</td>
<td>for</td>
<td>from</td>
</tr>
<tr>
<td>global</td>
<td>if</td>
<td>import</td>
</tr>
<tr>
<td>in</td>
<td>is</td>
<td>lambda</td>
</tr>
<tr>
<td>None</td>
<td>nonlocal</td>
<td>not</td>
</tr>
<tr>
<td>or</td>
<td>pass</td>
<td>raise </td>
</tr>
<tr>
<td>return</td>
<td>True</td>
<td>try</td>
</tr>
<tr>
<td>while</td>
<td>with</td>
<td>yield</td>
</tr>
</tbody></table></div>
<h2>Python Lines and Indentation</h2>
<p>Python programming provides no braces to indicate blocks of code for class and function definitions or flow control. Blocks of code are denoted by <b>line indentation</b>, which is rigidly enforced.</p>
<p>The number of spaces in the indentation is variable, but all statements within the block must be indented the same amount. For example −</p>
<pre class="just-code notranslate language-python" data-lang="python3">if True:
   print ("True")
else:
   print ("False")
</pre>
<p>However, the following block generates an error −</p>
<pre class="demo-code notranslate language-python" data-lang="python3">if True:
   print ("Answer")
   print ("True")
else:
   print ("Answer")
   print ("False")
</pre>
<p>Thus, in Python all the continuous lines indented with same number of spaces would form a block. The following example has various statement blocks −</p>
<blockquote>Do not try to understand the logic at this point of time. Just make sure you understood various blocks even if they are without braces.</blockquote>
<pre class="just-code notranslate language-python" data-lang="python3">import sys

try:
   # open file stream
   file = open(file_name, "w")
except IOError:
   print "There was an error writing to", file_name
   sys.exit()
print "Enter '", file_finish,
print "' When finished"
while file_text != file_finish:
   file_text = raw_input("Enter text: ")
   if file_text == file_finish:
      # close the file
      file.close
      break
   file.write(file_text)
   file.write("\n")
file.close()
file_name = raw_input("Enter filename: ")
if len(file_name) == 0:
   print "Next time please enter something"
   sys.exit()
try:
   file = open(file_name, "r")
except IOError:
   print "There was an error reading file"
   sys.exit()
file_text = file.read()
file.close()
print file_text
</pre>
<h2>Python Multi-Line Statements</h2>
<p>Statements in Python typically end with a new line. Python does, however, allow the use of the line continuation character (\) to denote that the line should continue. For example −</p>
<pre class="just-code notranslate language-python" data-lang="python3">total = item_one + \
        item_two + \
        item_three
</pre>
<p>Statements contained within the [], {}, or () brackets do not need to use the line continuation character. For example following statement works well in Python −</p>
<pre class="just-code notranslate language-python" data-lang="python3">days = ['Monday', 'Tuesday', 'Wednesday',
        'Thursday', 'Friday']
</pre>
<h2>Quotations in Python</h2>
<p>Python accepts single ('), double (") and triple (''' or """) quotes to denote string literals, as long as the same type of quote starts and ends the string.</p>
<p>The triple quotes are used to span the string across multiple lines. For example, all the following are legal −</p>
<pre class="just-code notranslate language-python" data-lang="python3">word = 'word'
print (word)

sentence = "This is a sentence."
print (sentence)

paragraph = """This is a paragraph. It is
 made up of multiple lines and sentences."""
print (paragraph)
</pre>
<h2>Comments in Python</h2>
<p>A comment is a programmer-readable explanation or annotation in the Python source code. They are added with the purpose of making the source code easier for humans to understand, and are ignored by Python interpreter</p>
<p>Just like most modern languages, Python supports single-line (or end-of-line) and multi-line (block) comments. <a href="/python/python_comments.htm" target="_blank">Python comments</a> are very much similar to the comments available in PHP, BASH and Perl Programming languages.</p>

<p>A hash sign (#) that is not inside a string literal begins a comment. All characters after the # and up to the end of the physical line are part of the comment and the Python interpreter ignores them.</p>

<pre class="demo-code notranslate language-python" data-lang="python3"># First comment
print ("Hello, World!") # Second comment
</pre>
<p>This produces the following result −</p>
<pre class="result notranslate">Hello, World!
</pre>
<p>You can type a comment on the same line after a statement or expression −</p>
<pre class="just-code notranslate language-python" data-lang="python3">name = "Madisetti" # This is again comment
</pre>
<p>You can comment multiple lines as follows −</p>
<pre class="just-code notranslate language-python" data-lang="python3"># This is a comment.
# This is a comment, too.
# This is a comment, too.
# I said that already.
</pre>
<p>Following triple-quoted string is also ignored by Python interpreter and can be used as a multiline comments:</p>
<pre class="just-code notranslate language-python" data-lang="python3">'''
This is a multiline
comment.
'''
</pre>
<h2>Using Blank Lines in Python Programs</h2>
<p>A line containing only whitespace, possibly with a comment, is known as a blank line and Python totally ignores it.</p>
<p>In an interactive interpreter session, you must enter an empty physical line to terminate a multiline statement.</p>
<h2>Waiting for the User</h2>
<p>The following line of the program displays the prompt, the statement saying “Press the enter key to exit”, and waits for the user to take action −</p>
<pre class="just-code notranslate language-python" data-lang="python3">#!/usr/bin/python

raw_input("\n\nPress the enter key to exit.")
</pre>
<p>Here, "\n\n" is used to create two new lines before displaying the actual line. Once the user presses the key, the program ends. This is a nice trick to keep a console window open until the user is done with an application.</p>
<h2>Multiple Statements on a Single Line</h2>
<p>The semicolon ( ; ) allows multiple statements on the single line given that neither statement starts a new code block. Here is a sample snip using the semicolon −</p>
<pre class="demo-code notranslate language-python" data-lang="python3">import sys; x = 'foo'; sys.stdout.write(x + '\n')
</pre>
<h2>Multiple Statement Groups as Suites</h2>
<p>A group of individual statements, which make a single code block are called <b>suites</b> in Python. Compound or complex statements, such as if, while, def, and class require a header line and a suite.</p>
<p>Header lines begin the statement (with the keyword) and terminate with a colon ( : ) and are followed by one or more lines which make up the suite. For example −</p>
<pre class="just-code notranslate language-python" data-lang="python3">if expression :
   suite
elif expression :
   suite
else :
   suite
</pre>
<h2>Command Line Arguments in Python</h2>
<p>Many programs can be run to provide you with some basic information about how they should be run. Python enables you to do this with -h −</p>
<pre class="just-code notranslate language-python" data-lang="python3">$ python3 -h
usage: python3 [option] ... [-c cmd | -m mod | file | -] [arg] ...
Options and arguments (and corresponding environment variables):
-c cmd : program passed in as string (terminates option list)
-d     : debug output from parser (also PYTHONDEBUG=x)
-E     : ignore environment variables (such as PYTHONPATH)
-h     : print this help message and exit

[ etc. ]
</pre>
<p>You can also program your script in such a way that it should accept various options. <a href="/python/python_command_line_arguments.htm">Command Line Arguments</a> is an advanced topic and should be studied a bit later once you have gone through rest of the Python concepts.</p>
		<div class="bottom-library-ads mt" style="margin:5px;">
	   <div class="google-bottom-ads" id="google-bottom-ads" style="height:280px;">
			<div></div>
			<div>
			  <div id="adp_bottom_ads"></div>

        <a href="{% url 'execute_code' %}" class="go-to-compiler-button" style="display: inline-block; margin-top: 20px; text-decoration: none; color: #fff; background-color: #4caf50; padding: 10px 20px; font-size: 16px; border-radius: 4px; cursor: pointer;">
            Let's Coding
        </a>


			  <script>
				 var adPos = document.getElementById('adp_bottom_ads');
				 var mobile_ad_id = "6d621d7e-9531-4f26-810f-68af67dc6366";
				 var desktop_ad_id = "4951d1d6-24d4-4a31-afb7-2c22c489eae1";
				 var adpushup = adpushup || {};
				 adpushup.que = adpushup.que || [];
				 adpushup.que.push(function() {
					var ad_id = window.innerWidth <= 768 ? mobile_ad_id : desktop_ad_id;
					adPos.innerHTML = '<div id="' + ad_id + '" class="_ap_apex_ad"></div>';
					adpushup.triggerAd(ad_id);
				 });
			  </script>
			</div>
		</div>
	</div>
</div>
	
	<div>
		<div class="data-sticky" id="google-right-ads">
			<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;min-height:280px!important">
			   <div id="2557b9b8-4c1f-4586-a953-f123dbd2ed8e" class="_ap_apex_ad">
				  <script>
					 if( window.innerWidth > 768 ){
						var adpushup = adpushup || {};
						adpushup.que = adpushup.que || [];
						adpushup.que.push(function() {
						adpushup.triggerAd("2557b9b8-4c1f-4586-a953-f123dbd2ed8e");
						});
					 }
				  </script>
			   </div>
			</div>
			<div class="google-right-ad" style="margin-top:16px;min-height:280px!important">
			   <div id="b078e6a3-e1b7-40fe-b690-11ac441ad2d5" class="_ap_apex_ad">
				  <script>
					 if( window.innerWidth > 768 ){
						var adpushup = adpushup || {};
						adpushup.que = adpushup.que || [];
						adpushup.que.push(function() {
						adpushup.triggerAd("b078e6a3-e1b7-40fe-b690-11ac441ad2d5");
						});
					 }
				  </script>
			   </div>
			</div>
			<div class="google-right-ad" style="margin-top:16px;margin-bottom:15px;min-height:600px!important">
			   <div id="8f8814c2-d64c-4d26-9cb9-543653c0b48f" class="_ap_apex_ad">
				  <script>
					 if( window.innerWidth > 768 ){
						var adpushup = adpushup || {};
						adpushup.que = adpushup.que || [];
						adpushup.que.push(function() {
						adpushup.triggerAd("8f8814c2-d64c-4d26-9cb9-543653c0b48f");
						});
					 }
				  </script>
			   </div>
			</div>
		</div>
	</div>
</div>
</div>
</main>


<script sync="" src="..{% static '/static/js/lib-script_v10.2.js' %}' %}"></script>
<script src="https://accounts.google.com/gsi/client" async="" defer=""></script> 
<script async="" src="https://www.googletagmanager.com/gtag/js?id=G-EX9ZP4VY84"></script>
<script>
     window.dataLayer = window.dataLayer || [];
     function gtag(){dataLayer.push(arguments);}
     gtag('js', new Date());
     gtag('config', 'G-EX9ZP4VY84');
</script>


</body></html>