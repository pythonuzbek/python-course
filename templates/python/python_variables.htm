<!DOCTYPE html><html lang="en"><head>
    {% load static %}
<title>Python - Variables</title>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes, maximum-scale=6"> <meta name="Keywords" content="Variables, Python, HTML, Python, CSS, SQL, JavaScript, Perl, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Machine Learning, Data Science, Tutorials, Programming, Data Structure, Algorithms, Web Development, Training, Learning, Quiz, Exercises, Courses, References, Computer Science, Management, Finance, Examples, Articles, Demos, Tips, Website">
<meta name="Description" content="Python - Variables - Python variables are the reserved memory locations used to store values with in a Python Program. This means that when you create a variable you reserve some space in the memory. Based on the data type of a variable, Python interpreter allocates memory and decides what can be stored in the reserved">
<meta property="og:image" content="../images/tp_logo_436.png">
<meta property="og:image:type" content="image/png">
<meta property="og:image:width" content="436">
<meta property="og:image:height" content="228">
<meta property="og:title" content="Python - Variables">
<meta property="og:description" content="Python - Variables - Python variables are the reserved memory locations used to store values with in a Python Program. This means that when you create a variable you reserve some space in the memory. Based on the data type of a variable, Python interpreter allocates memory and decides what can be stored in the reserved">
<link rel="icon" href="{% static '/images/favicon.ico' %}">
<link rel="apple-touch-icon" sizes="180x180" href="{% static '/images/apple-touch-icon.png' %}">
<link rel="icon" type="image/png" sizes="32x32" href="{% static '/images/favicon-32x32.png' %}">
<link rel="icon" type="image/png" sizes="16x16" href="{% static '/images/favicon-16x16.png' %}">
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="">
<link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;500;600;700&amp;family=Lato:wght@400;700&amp;family=Poppins:wght@400;500;600&amp;family=Raleway:wght@500&amp;display=swap" rel="stylesheet">
<link rel="stylesheet" href="{% static '/static/css/lib-style_v41.56.css' %}" media="screen, print">
<script id="adv" data-cfasync="false">(function(w, d) { var s = d.createElement('script'); s.src = '//cdn.adpushup.com/40046/adpushup.js'; s.type = 'text/javascript'; s.async = true; (d.getElementsByTagName('head')[0] || d.getElementsByTagName('body')[0]).appendChild(s); })(window, document);</script>
<script>
!function(t,e){var i=function(t,e){if(e.body){var n=e.createElement("div");n.className="ad-slot ad gpt-div-slot",n.style="position: absolute; visibility: hidden;",n.textContent="&nbsp;",e.body.appendChild(n),setTimeout((function(){if(0===n.clientHeight){var t=e.createElement("script");t.setAttribute("src","https://delivery.adrecover.com/18107/adRecover.js"),t.setAttribute("type","text/javascript"),t.setAttribute("async",!0),e.head.append(t)}}),0)}else setTimeout((function(){i(t,e)}),50)};i(t,e)}(window,document);
</script>
</head>
<body style="--container: min(95%, 1780px);">
<button class="icon-button--inverted scroll-to-top-button" title="Scroll Up">
  <svg style="rotate: 180deg" width="24" height="24" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M9.52246 5.06689L6.08496 8.50439L2.64746 5.06689" stroke="#fff" stroke-linecap="round" stroke-linejoin="round"></path></svg>
</button>
<main class="bg-light" style="overflow: unset;">
<div class="container-fluid">
<div class="row">
<div class="tutorial-toc">
<div class="toc-nav">
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
tex2jax: { inlineMath: [["$","$"],["\\(","\\)"]] },
"HTML-CSS": {
linebreaks: { automatic: true, width: "container" }          
}              
});
</script>
<script type="text/javascript" src="{% static '/mathjax/latest/MathJax_config=TeX-AMS-MML_HTMLorMML.js' %}}"></script>
<div class="mini-logo">
<img src="{% static 'images/python-mini-logo_v1.jpg' %}" alt="Python Tutorial">
</div>
<ul class="toc chapters">
<li class="heading">Python Basics</li>
<li><a href="{% url 'index_view' %}">Python - Home</a></li>
<li><a href="{% url 'python_overview' %}">Python - Overview</a></li>
<li><a href="{% url 'basic_syntax' %}">Python - Basic Syntax</a></li>
<li><a href="{% url 'variables' %}">Python - Variables</a></li>
<li><a href="{% url 'data_types' %}">Python - Data Types</a></li>
<li><a href="{% url 'operators' %}">Python - Operators</a></li>
<li><a href="{% url 'arithmetic_operators' %}">Python - Arithmetic Operators</a></li>
<li><a href="{% url 'comments' %}">Python - Comments</a></li>
<li><a href="{% url 'boolean' %}">Python - Booleans</a></li>
<li><a href="{% url 'if_statement' %}">Python - If Statement</a></li>
<li><a href="{% url 'if_else' %}">Python - If else</a></li>
<li><a href="{% url 'nested_if' %}">Python - Nested If</a></li>
<li><a href="{% url 'loops' %}">Python - Loops</a></li>
<li><a href="{% url 'for_loops' %}">Python - for Loops</a></li>
<li><a href="{% url 'while_loops' %}">Python - While Loops</a></li>
<li><a href="{% url 'function' %}">Python - Functions</a></li>
<li><a href="{% url 'strings' %}">Python - Strings</a></li>
<li><a href="{% url 'slicing_string' %}">Python - Slicing Strings</a></li>
<li><a href="{% url 'string_exercise' %}">Python - String Exercises</a></li>
<li><a href="{% url 'list' %}">Python - Lists</a></li>
<li><a href="{% url 'list-comprehension' %}">Python - List Comprehension</a></li>
<li><a href="{% url 'list_methods' %}">Python - List Methods</a></li>
<li><a href="{% url 'list_exercise' %}">Python - List Exercises</a></li>
<li><a href="{% url 'tuple' %}">Python - Tuples</a></li>
<li><a href="{% url 'tuple_methods' %}">Python - Tuple Methods</a></li>
<li><a href="{% url 'tuple_exercise' %}">Python - Tuple Exercises</a></li>
<li><a href="{% url 'set' %}">Python - Sets</a></li>
<li><a href="{% url 'set_methods' %}">Python - Set Methods</a></li>
<li><a href="{% url 'set_exercise' %}">Python - Set Exercises</a></li>
<li><a href="{% url 'dictionary' %}">Python - Dictionaries</a></li>
<li><a href="{% url 'dictionary_methods' %}">Python - Dictionary Methods</a></li>
<li><a href="{% url 'dictionary_exercise' %}">Python - Dictionary Exercises</a></li>
<li><a href="{% url 'array' %}">Python - Arrays</a></li>
<li><a href="{% url 'oop_concepts' %}">Python - OOPs Concepts</a></li>
<li><a href="{% url 'object_class' %}">Python - Object &amp; Classes</a></li>
<li><a href="{% url 'class_attributes' %}">Python - Class Attributes</a></li>
<li><a href="{% url 'class_methods' %}">Python - Class Methods</a></li>
<li><a href="{% url 'inheritance' %}">Python - Inheritance</a></li>
<li><a href="{% url 'polymorphism' %}">Python - Polymorphism</a></li>
<li><a href="{% url 'encapsulation' %}">Python - Encapsulation</a></li>
<li><a href="{% url 'package' %}">Python - Packages</a></li>
<li><a href="{% url 'discuss' %}">Python - Discussion</a></li>
</ul>
      </div>
      <div id="stickyparent" class="d-none d-sm-block">
         <div style="height:250px;width:300px;" id="sticky-ad">
            <div id="430c9911-782f-495d-88f9-69f58ca8c9a4" class="_ap_apex_ad">
               <script>
               var adpushup = adpushup || {};
               adpushup.que = adpushup.que || [];
               adpushup.que.push(function() {
               adpushup.triggerAd("430c9911-782f-495d-88f9-69f58ca8c9a4");
               });
               </script>
            </div>
         </div>
      </div>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="tutorial-content" id="mainContent">
<h1>Python - Variables</h1>
<hr>
<div id="adp_top_ads" style="text-align:center !important;overflow: hidden; max-height:99px;min-height:99px"></div>
<script>
     var adPos = document.getElementById('adp_top_ads');
     var ad_id_720 = "8014640d-fd34-4b2e-9b1b-cc67234a2325";
     var ad_id_650 = "2d1bb2c4-eb72-471d-9c80-1bf5514728c1";
     var ad_id_300 = "df94a1a9-ae2f-432d-9a92-d93823ff4503";
     var width = window.innerWidth;
     var ad_id = ad_id_720;
     if( width <= 768 ){
        ad_id =  ad_id_300;
        adPos.style.minHeight = "260px";
        adPos.style.maxHeight = "260px";
     }else if( width <= 1435 ){
        ad_id =  ad_id_650;
     }
     adPos.innerHTML = '<div id="' + ad_id + '" class="_ap_apex_ad"></div>';
     var adpushup = adpushup || {};
     adpushup.que = adpushup.que || [];
     adpushup.que.push(function() {
     adpushup.triggerAd(ad_id);
     });
</script>
<hr>
<div class="clearer"></div>
<h2>Python Variables</h2>
<p>Python variables are the reserved memory locations used to store values with in a Python Program. This means that when you create a variable you reserve some space in the memory. Based on the data type of a variable, <a href="/python/python_interpreter.htm" target="_blank">Python interpreter</a> allocates memory and decides what can be stored in the reserved memory. Therefore, by assigning different <a href="{% url 'data_types' %}" target="_blank">data types</a> to Python variables, you can store integers, decimals or characters in these variables.</p>

<h2>Memory Addresses</h2>
<p>Data items belonging to different data types are stored in computer's memory. Computer's memory locations are having a number or address, internally represented in binary form. Data is also stored in binary form as the computer works on the principle of binary representation. In the following diagram, a string <b>May</b> and a number <b>18</b> is shown as stored in memory locations.</p>
<img src="{% static 'images/memory.jpg' %}" alt="memory">
<p>If you know the assembly language, you will covert these data items and the memory address, and give a machine language instruction. However, it is not easy for everybody. Language translator such as Python interpreter performs this type of conversion. It stores the object in a randomly chosen memory location. Python's built-in <b>id()</b> function returns the address where the object is stored.</p>
<pre class="just-code notranslate language-python" data-lang="python">&gt;&gt;&gt; "May"
May
&gt;&gt;&gt; id("May")
2167264641264

&gt;&gt;&gt; 18
18
&gt;&gt;&gt; id(18)
140714055169352
</pre>
<p>Once the data is stored in the memory, it should be accessed repeatedly for performing a certain process. Obviously, fetching the data from its ID is cumbersome. High level languages like Python make it possible to give a suitable alias or a label to refer to the memory location.</p>
<p>In the above example, let us label the location of May as month, and location in which 18 is stored as age. Python uses the assignment operator (=) to bind an object with the label.</p>
<pre class="just-code notranslate language-python" data-lang="python">&gt;&gt;&gt; month="May"
&gt;&gt;&gt; age=18
</pre>
<p>The data object (May) and its name (month) have the same id(). The id() of 18 and age are also same.
</p>
<pre class="just-code notranslate language-python" data-lang="python">&gt;&gt;&gt; id(month)
2167264641264
&gt;&gt;&gt; id(age)
140714055169352
</pre>
<p>The label is an identifier. It is usually called as a variable. A Python variable is a symbolic name that is a reference or pointer to an object.</p>
<h2>Creating Python Variables</h2>
<p>Python variables do not need explicit declaration to reserve memory space or you can say to create a variable. A Python variable is created automatically when you assign a value to it. The equal sign (=) is used to assign values to variables.</p>
<p>The operand to the left of the = operator is the name of the variable and the operand to the right of the = operator is the value stored in the variable. For example −</p>
<h3>Example to Create Python Variables</h3>
<p>This example creates different types (an integer, a float, and a string) of variables.</p>
<pre class="just-code notranslate language-python" data-lang="python3">counter = 100          # Creates an integer variable
miles   = 1000.0       # Creates a floating point variable
name    = "Zara Ali"   # Creates a string variable
</pre>

<h2>Printing Python Variables</h2>
<p>Once we create a Python variable and assign a value to it, we can print it using <b>print()</b> function. Following is the extension of previous example and shows how to print different variables in Python:</p>
<h3>Example to Print Python Variables</h3>
<p>This example prints variables.</p>
<pre class="demo-code notranslate language-python" data-lang="python3">counter = 100          # Creates an integer variable
miles   = 1000.0       # Creates a floating point variable
name    = "Zara Ali"   # Creates a string variable

print (counter)
print (miles)
print (name)
</pre>
<p>Here, 100, 1000.0 and  "Zara Ali" are the values assigned to <i>counter</i>, <i>miles</i>, and <i>name</i> variables, respectively. When running the above Python program, this produces the following result −</p>
<pre class="result notranslate">100
1000.0
Zara Ali
</pre>
<h2>Deleting Python Variables</h2>
<p>You can delete the reference to a number object by using the del statement. The syntax of the del statement is −</p>
<pre class="just-code notranslate language-python" data-lang="python3">del var1[,var2[,var3[....,varN]]]]
</pre>
<p>You can delete a single object or multiple objects by using the del statement. For example −</p>
<pre class="just-code notranslate language-python" data-lang="python3">del var
del var_a, var_b
</pre>
<h3>Example</h3>
<p>Following examples shows how we can delete a variable and if we try to use a deleted variable then Python interpreter will throw an error:</p>
<pre class="demo-code notranslate language-python" data-lang="python3">counter = 100
print (counter)

del counter
print (counter)
</pre>
<p>This will produce the following result:</p>
<pre class="result notranslate">100
Traceback (most recent call last):
  File "main.py", line 7, in &lt;module&gt;
    print (counter)
NameError: name 'counter' is not defined
</pre>
<h2>Getting Type of a Variable</h2>
<p>You can get the data type of a Python variable using the python built-in function type() as follows.</p>
<h3>Example: Printing Variables Type</h3>
<pre class="demo-code notranslate language-python" data-lang="python3">x = "Zara"
y =  10
z =  10.10

print(type(x))
print(type(y))
print(type(z))
</pre>
<p>This will produce the following result:</p>
<pre class="result notranslate">&lt;class 'str'&gt;
&lt;class 'int'&gt;
&lt;class 'float'&gt;
</pre>
<h2>Casting Python Variables</h2>
<p>You can specify the data type of a variable with the help of casting as follows:</p>
<h3>Example</h3>
<p>This example demonstrates case sensitivity of variables.</p>
<pre class="demo-code notranslate language-python" data-lang="python3">x = str(10)    # x will be '10'
y = int(10)    # y will be 10 
z = float(10)  # z will be 10.0

print( "x =", x )
print( "y =", y )
print( "z =", z )
</pre>
<p>This will produce the following result:</p>
<pre class="result notranslate">x = 10
y = 10
z = 10.0
</pre>
<h2>Case-Sensitivity of Python Variables</h2>
<p>Python variables are case sensitive which means <b>Age</b> and <b>age</b> are two different variables:</p>
<pre class="demo-code notranslate language-python" data-lang="python3">age = 20
Age = 30

print( "age =", age )
print( "Age =", Age )
</pre>
<p>This will produce the following result:</p>
<pre class="result notranslate">age = 20
Age = 30
</pre>
<h2>Python Variables - Multiple Assignment</h2>
<p>Python allows to initialize more than one variables in a single statement. In the following case, three variables have same value.</p>
<pre class="just-code notranslate language-python" data-lang="python">&gt;&gt;&gt; a=10
&gt;&gt;&gt; b=10
&gt;&gt;&gt; c=10
</pre>
<p>Instead of separate assignments, you can do it in a single assignment statement as follows −</p>
<pre class="just-code notranslate language-python" data-lang="python">&gt;&gt;&gt; a=b=c=10
&gt;&gt;&gt; print (a,b,c)
10 10 10
</pre>
<p>In the following case, we have three variables with different values.</p>
<pre class="just-code notranslate language-python" data-lang="python">&gt;&gt;&gt; a=10
&gt;&gt;&gt; b=20
&gt;&gt;&gt; c=30
</pre>
<p>These separate assignment statements can be combined in one. You need to give comma separated variable names on left, and comma separated values on the right of = operator.</p>
<pre class="just-code notranslate language-python" data-lang="python">&gt;&gt;&gt; a,b,c = 10,20,30
&gt;&gt;&gt; print (a,b,c)
10 20 30
</pre>
<p>Let's try few examples in script mode: −</p>
<pre class="demo-code notranslate language-python" data-lang="python3">a = b = c = 100

print (a)
print (b)
print (c)
</pre>
<p>This produces the following result:</p>
<pre class="result notranslate">100
100
100
</pre>
<p>Here, an integer object is created with the value 1, and all three variables are assigned to the same memory location. You can also assign multiple objects to multiple variables. For example −</p>
<pre class="demo-code notranslate language-python" data-lang="python3">a,b,c = 1,2,"Zara Ali"

print (a)
print (b)
print (c)
</pre>
<p>This produces the following result:</p>
<pre class="result notranslate">1
2
Zara Ali
</pre>
<p>Here, two integer objects with values 1 and 2 are assigned to variables a and b respectively, and one string object with the value "Zara Ali" is assigned to the variable c.</p>
<h2>Python Variables - Naming Convention</h2>
<p>Every Python variable should have a unique name like a, b, c. A variable name can be meaningful like color, age, name etc. There are certain rules which should be taken care while naming a Python variable:</p>
<ul class="list">
<li>A variable name must start with a letter or the underscore character</li>
<li>A variable name cannot start with a number or any special character like $, (, * % etc.</li>
<li>A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )</li>
<li>Python variable names are case-sensitive which means Name and NAME are two different variables in Python.</li>
<li>Python reserved keywords cannot be used naming the variable.</li>
</ul>
<p>If the name of variable contains multiple words, we should use these naming patterns −</p>
<ul class="list">
<li><p><b>Camel case</b> − First letter is a lowercase, but first letter of each subsequent word is in uppercase. For example: kmPerHour, pricePerLitre</p></li>
<li><p><b>Pascal case</b> − First letter of each word is in uppercase. For example: KmPerHour,
PricePerLitre</p></li>
<li><p><b>Snake case</b> − Use single underscore (_) character to separate words. For example: km_per_hour, price_per_litre</p></li>
</ul>

<h3>Example</h3>
<p>Following are valid Python variable names:</p>
<pre class="demo-code notranslate language-python" data-lang="python3">counter = 100
_count  = 100
name1 = "Zara"
name2 = "Nuha"
Age  = 20
zara_salary = 100000

print (counter)
print (_count)
print (name1)
print (name2)
print (Age)
print (zara_salary)
</pre>
<p>This will produce the following result:</p>
<pre class="result notranslate">100
100
Zara
Nuha
20
100000
</pre>
<h3>Example</h3>
<p>Following are invalid Python variable names:</p>
<pre class="demo-code notranslate language-python" data-lang="python3">1counter = 100
$_count  = 100
zara-salary = 100000

print (1counter)
print ($count)
print (zara-salary)
</pre>
<p>This will produce the following result:</p>
<pre class="result notranslate">File "main.py", line 3
    1counter = 100
           ^
SyntaxError: invalid syntax
</pre>
<h3>Example</h3>
<p>Once you use a variable to identify a data object, it can be used repeatedly without its id() value. Here, we have a variables height and width of a rectangle. We can compute the area and perimeter with these variables.</p>
<pre class="just-code notranslate language-python" data-lang="python">&gt;&gt;&gt; width=10
&gt;&gt;&gt; height=20
&gt;&gt;&gt; area=width*height
&gt;&gt;&gt; area
200
&gt;&gt;&gt; perimeter=2*(width+height)
&gt;&gt;&gt; perimeter
60
</pre>
<p>Use of variables is especially advantageous when writing scripts or programs. Following script also uses the above variables.</p>
<pre class="demo-code notranslate language-python" data-lang="python3">#! /usr/bin/python3

width = 10
height = 20
area = width*height
perimeter = 2*(width+height)
print ("Area = ", area)
print ("Perimeter = ", perimeter)
</pre>
<p>Save the above script with .py extension and execute from command-line. The result would be −</p>
<pre class="result notranslate">Area = 200
Perimeter = 60
</pre>
<h2>Constants in Python</h2>
<p>Python doesn't have any formally defined constants, However you can indicate a variable to be treated as a constant by using all-caps names with underscores. For example, the name PI_VALUE indicates that you don't want the variable redefined or changed in any way.</p>
<blockquote>The naming convention using all-caps is sometimes referred to as screaming snake case - where the all-caps (screaming) and the underscores (snakes).</blockquote>
<h2>Python vs C/C++ Variables</h2>
<p>The concept of variable works differently in Python than in C/C++. In C/C++, a variable is a named memory location. If a=10 and also b=10, both are two different memory locations. Let us assume their memory address is 100 and 200 respectively.</p>
<img src="{% static 'images/named_memory_location.jpg' %}" alt="named memory location">
<p>If a different value is assigned to "a" - say 50, 10 in the address 100 is overwritten.</p>
<img src="{% static 'images/different_value_assigned.jpg' %}" alt="Image-20">
<p>A Python variable refers to the object and not the memory location. An object is stored in
memory only once. Multiple variables are really the multiple labels to the same object.</p>
<img src="{% static 'images/address_100.jpg' %}" alt="address_100">
<p>The statement a=50 creates a new <b>int</b> object 50 in the memory at some other location, leaving the object 10 referred by "b".</p>
<img src="{% static 'images/address_150.jpg' %}" alt="address_150">
<p>Further, if you assign some other value to b, the object 10 remains unreferred.</p>
<img src="{% static 'images/address_200.jpg' %}" alt="address_200">
<p>Python's garbage collector mechanism releases the memory occupied by any unreferred object.</p>
<p>Python's identity operator <b>is</b> returns True if both the operands have same id() value.</p>
<pre class="just-code notranslate language-python" data-lang="python">&gt;&gt;&gt; a=b=10
&gt;&gt;&gt; a is b
True
&gt;&gt;&gt; id(a), id(b)
(140731955278920, 140731955278920)
</pre>
		<div class="bottom-library-ads mt" style="margin:5px;">
	   <div class="google-bottom-ads" id="google-bottom-ads" style="height:280px;">
			<div></div>
			<div>
			  <div id="adp_bottom_ads"></div>
                        <a href="{% url 'execute_code' %}" class="go-to-compiler-button" style="display: inline-block; margin-top: 20px; text-decoration: none; color: #fff; background-color: #4caf50; padding: 10px 20px; font-size: 16px; border-radius: 4px; cursor: pointer;">
            Let's Coding
        </a>
			  <script>
				 var adPos = document.getElementById('adp_bottom_ads');
				 var mobile_ad_id = "6d621d7e-9531-4f26-810f-68af67dc6366";
				 var desktop_ad_id = "4951d1d6-24d4-4a31-afb7-2c22c489eae1";
				 var adpushup = adpushup || {};
				 adpushup.que = adpushup.que || [];
				 adpushup.que.push(function() {
					var ad_id = window.innerWidth <= 768 ? mobile_ad_id : desktop_ad_id;
					adPos.innerHTML = '<div id="' + ad_id + '" class="_ap_apex_ad"></div>';
					adpushup.triggerAd(ad_id);
				 });
			  </script>
			</div>
		</div>
	</div>
</div>
	
	<div>
		<div class="data-sticky" id="google-right-ads">
			<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;min-height:280px!important">
			   <div id="2557b9b8-4c1f-4586-a953-f123dbd2ed8e" class="_ap_apex_ad">
				  <script>
					 if( window.innerWidth > 768 ){
						var adpushup = adpushup || {};
						adpushup.que = adpushup.que || [];
						adpushup.que.push(function() {
						adpushup.triggerAd("2557b9b8-4c1f-4586-a953-f123dbd2ed8e");
						});
					 }
				  </script>
			   </div>
			</div>
			<div class="google-right-ad" style="margin-top:16px;min-height:280px!important">
			   <div id="b078e6a3-e1b7-40fe-b690-11ac441ad2d5" class="_ap_apex_ad">
				  <script>
					 if( window.innerWidth > 768 ){
						var adpushup = adpushup || {};
						adpushup.que = adpushup.que || [];
						adpushup.que.push(function() {
						adpushup.triggerAd("b078e6a3-e1b7-40fe-b690-11ac441ad2d5");
						});
					 }
				  </script>
			   </div>
			</div>
			<div class="google-right-ad" style="margin-top:16px;margin-bottom:15px;min-height:600px!important">
			   <div id="8f8814c2-d64c-4d26-9cb9-543653c0b48f" class="_ap_apex_ad">
				  <script>
					 if( window.innerWidth > 768 ){
						var adpushup = adpushup || {};
						adpushup.que = adpushup.que || [];
						adpushup.que.push(function() {
						adpushup.triggerAd("8f8814c2-d64c-4d26-9cb9-543653c0b48f");
						});
					 }
				  </script>
			   </div>
			</div>
		</div>
	</div>
</div>
</div>
</main>


<script sync="" src="..{% static '/static/js/lib-script_v10.2.js' %}' %}"></script>
<script src="https://accounts.google.com/gsi/client" async="" defer=""></script> 
<script async="" src="https://www.googletagmanager.com/gtag/js?id=G-EX9ZP4VY84"></script>
<script>
     window.dataLayer = window.dataLayer || [];
     function gtag(){dataLayer.push(arguments);}
     gtag('js', new Date());
     gtag('config', 'G-EX9ZP4VY84');
</script>


</body></html>